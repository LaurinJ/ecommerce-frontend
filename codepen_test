import React from "react";
import "./styles.css";

const initialState = {
  todoList: [],
  count: 1,
};

const actions = {
  ADD_TODO_ITEM: "ADD_TODO_ITEM",
  REMOVE_TODO_ITEM: "REMOVE_TODO_ITEM",
  TOGGLE_COMPLETED: "TOGGLE_COMPLETED",
  TEST_ADD: "TEST_ADD",
};

const reducer = (state, action) => {
  switch (action.type) {
    case actions.TEST_ADD:
      console.log("reducer ll");
      return { todoList: [...state.todoList], count: Math.random() * 100 };
    case actions.ADD_TODO_ITEM:
      return {
        ...state,
        todoList: [
          ...state.todoList,
          {
            id: new Date().valueOf(),
            label: action.todoItemLabel,
            completed: false,
          },
        ],
      };
    case actions.REMOVE_TODO_ITEM: {
      const filteredTodoItem = state.todoList.filter(
        (todoItem) => todoItem.id !== action.todoItemId
      );
      return { todoList: filteredTodoItem };
    }
    case actions.TOGGLE_COMPLETED: {
      const updatedTodoList = state.todoList.map((todoItem) =>
        todoItem.id === action.todoItemId
          ? { ...todoItem, completed: !todoItem.completed }
          : todoItem
      );
      return { todoList: updatedTodoList };
    }
    default:
      return state;
  }
};

const TodoListContext = React.createContext();

const Provider = ({ children }) => {
  const [state, dispatch] = React.useReducer(reducer, initialState);

  const value = {
    count: state.count,
    testadd: () => {
      console.log("disp");

      dispatch({ type: actions.TEST_ADD });
    },
    todoList: state.todoList,
    addTodoItem: (todoItemLabel) => {
      dispatch({ type: actions.ADD_TODO_ITEM, todoItemLabel });
    },
    removeTodoItem: (todoItemId) => {
      dispatch({ type: actions.REMOVE_TODO_ITEM, todoItemId });
    },
    markAsCompleted: (todoItemId) => {
      dispatch({ type: actions.TOGGLE_COMPLETED, todoItemId });
    },
  };

  return (
    <TodoListContext.Provider value={value}>
      {children}
    </TodoListContext.Provider>
  );
};

const Test1 = () => {
  return (
    <>
      <h1>{Math.random() * 100}</h1>
      <TodoList />
    </>
  );
};

const Test2 = () => {
  const { count } = React.useContext(TodoListContext);
  return (
    <>
      <h1>{count}</h1>
    </>
  );
};

const Test3 = () => {
  const { testadd, count } = React.useContext(TodoListContext);
  return (
    <>
      <button
        onClick={() => {
          testadd();
        }}
      >
        Add test
      </button>
    </>
  );
};

const AddTodo = () => {
  const [inputValue, setInputValue] = React.useState("");
  const { addTodoItem } = React.useContext(TodoListContext);

  return (
    <>
      <input
        type="text"
        value={inputValue}
        placeholder={"Type and add todo item"}
        onChange={(e) => setInputValue(e.target.value)}
      />
      <button
        onClick={() => {
          addTodoItem(inputValue);
          setInputValue("");
        }}
      >
        Add
      </button>
    </>
  );
};

const TodoList = () => {
  const { todoList, removeTodoItem, markAsCompleted } =
    React.useContext(TodoListContext);
  return (
    <>
      <ul>
        {todoList.map((todoItem) => (
          <li
            className={`todoItem ${todoItem.completed ? "completed" : ""}`}
            key={todoItem.id}
            onClick={() => markAsCompleted(todoItem.id)}
          >
            {todoItem.label}
            <button
              className="delete"
              onClick={() => removeTodoItem(todoItem.id)}
            >
              X
            </button>
          </li>
        ))}
      </ul>
    </>
  );
};

export default function App() {
  return (
    <Provider>
      <AddTodo />
      <Test1 />
      <Test2 />
      <Test3 />
    </Provider>
  );
}

<div>
  <div className="flex flex-wrap justify-between">
    {/* image section */}
    <div className="w-20 sm:w-[7.5rem] sm:h-[5.6rem] mr-5 mb-5 h-auto">
      <Image
        src="https://i.cdn.nrholding.net/50414342/235/240"
        width={140}
        height={185}
        layout="responsive"
      />
    </div>
    {/* description section */}
    <div className="cartitem_product_info mb-5">
      <h4 className="mb-2 sm:text-lg font-semibold">
        PARKSIDE® Aku rázový utahovák na kola auta PASSK 20-Li A1
      </h4>
      <div className="my-4 text-sm sm:text-base text-gray-600">
        <span>
          Rychleschnoucí a odvádějící vlhkost | příjemně měkké a hřejivé | extra
          teplé
        </span>
      </div>
    </div>
    {/* amount section */}
    <div className="sm:order-4 lg:order-3 sm:ml-40 lg:ml-5">
      <div className="h-14 p-[10px] inline-block border border-gray-300 rounded-md text-2xl leading-6">
        <button className="w-6">-</button>
        <input
          className="w-12 text-center"
          value={1}
          onChange={() => {
            console.log("change amount");
          }}
        />
        <button className="w-6">+</button>
      </div>
    </div>
    {/* price section */}
    <div className="sm:order-3 lg:order-4 flex text-[0.625rem] sm:text-xs font-medium text-gray-800 text-right">
      <div className="lg:w-[6.25rem]">
        Cena/Ks{" "}
        <div className="flex flex-col my-[10px]">
          <div className="text-sm text-red-500">
            <del>
              {product.price < product.old_price
                ? product.old_price + " Kč"
                : ""}
            </del>
          </div>
          <div>
            <span className="sm:text-lg font-bold">{product.price} Kč</span>
          </div>
        </div>
      </div>

      <div className="ml-5 lg:w-[6.25rem]">
        Celkem{" "}
        <div className="flex flex-col my-[10px]">
          <div>
            <span className="sm:text-lg font-bold">{product.price} Kč</span>
          </div>
        </div>
      </div>
    </div>
  </div>
  {/* information section */}
  <div className="sm:ml-40 lg:ml-36 my-4 flex text-green-600">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className="h-6 w-7"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={2}
        d="M16 11V7a4 4 0 00-8 0v4M5 9h14l1 12H4L5 9z"
      />
    </svg>
    Během 3 pracovních dní
  </div>
  {/* delete product section */}
  <div className="sm:ml-40 lg:ml-36">
    <button className="flex font-normal lg:text-lg text-blue-600">
      <svg
        xmlns="http://www.w3.org/2000/svg"
        className="h-7 w-7"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          strokeLinecap="round"
          strokeLinejoin="round"
          strokeWidth={2}
          d="M6 18L18 6M6 6l12 12"
        />
      </svg>
      Odstranit
    </button>
  </div>
  <hr className="mt-8 pb-8 text-gray-300" />
</div>;
